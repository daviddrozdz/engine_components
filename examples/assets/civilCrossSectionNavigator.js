import"./index-H1X3kY-x.js";import{C as M,W as S,S as C,O as B,G as E,F as k,c as v}from"./index-Dge8UBVh.js";import{T as D}from"./index-ByMLC5eT.js";import{w as x}from"./index-BvK1Dhsm.js";import{S as I}from"./stats.min-GTpOrGrX.js";import{K as L,N as A,i as N,j as P,d as U,C as W,f as j}from"./index-Dv_9qWwv.js";import"./three.module-Bf8H_4UF.js";import"./_commonjsHelpers-Cpj98o6Y.js";D.init();x.init();const y=document.getElementById("container"),e=new M,F=e.get(S),t=F.create();t.scene=new C(e);t.renderer=new L(e,y);t.camera=new B(e);e.init();t.scene.setup();t.camera.controls.setLookAt(5,5,5,0,0,0);y.appendChild(t.renderer.three2D.domElement);const T=e.get(E);T.create(t);t.scene.three.background=null;const b=e.get(k),G=await fetch("https://thatopen.github.io/engine_components/resources/road.frag"),H=await G.arrayBuffer(),K=new Uint8Array(H),d=b.load(K);t.scene.three.add(d);const O=await fetch("https://thatopen.github.io/engine_components/resources/road.json");d.setLocalProperties(await O.json());const p=document.getElementById("scene-2d-left");p.components=e;if(!p.world)throw new Error("World not found!");const c=e.get(A);c.world=p.world;await c.draw(d);const l=e.get(N);l.world=t;l.draw(d);const g=document.getElementById("scene-2d-right");g.components=e;if(!g.world)throw new Error("World not found!");const f=e.get(P);f.world=g.world;f.world3D=t;c.onMarkerChange.add(({alignment:o,percentage:n,type:r,curve:s})=>{if(l.setMarker(o,n,r),r==="select"){const i=s.alignment.absolute[s.index].mesh,m=o.getPointAt(n,"absolute");f.set(i,m)}});c.onHighlight.add(({mesh:o})=>{l.highlighter.select(o);const n=o.curve.index,r=o.curve.alignment.absolute[n];r.mesh.geometry.computeBoundingSphere();const s=r.mesh.geometry.boundingSphere;s&&t.camera.controls.fitToSphere(s,!0)});c.onMarkerHidden.add(({type:o})=>{l.hideMarker(o)});const h=e.get(v);h.byEntity(d);const _=h.list,w=e.get(U),u=w.styles.list;for(const o in _.entities){const n=h.find({entities:[o]}),r=new W(Math.random(),Math.random(),Math.random()),s=new j({color:r});w.styles.create(o,new Set,g.world,s);for(const i in n){const m=b.list.get(i);m&&(u[o].fragments[i]=new Set(n[i]),u[o].meshes.add(m.mesh))}}w.update(!0);const a=new I;a.showPanel(2);document.body.append(a.dom);a.dom.style.left="0px";a.dom.style.zIndex="unset";t.renderer.onBeforeUpdate.add(()=>a.begin());t.renderer.onAfterUpdate.add(()=>a.end());
